
public class Ex11 {
	public static void main(String[] args) {
		// 그래프 -> G(V, E)
		// V : 노드, E : 간선
		
		// 1. 무방향 그래프
		// 1 ─ 2 ─ 5
		// │   │
		// 3 ― 4
		// 입력 -> 노드 : (1 2), (1 3), (2 4), (3 4), (2 5)
		//     -> 간선 : (5 5) -> 5개의 노드, 5개의 간선
		// 2차원 배열로 입력한다. -> 인접행렬
		//   1 2 3 4 5
		// 1 0 1 1 0 0
		// 2 1 0 0 1 1
		// 3 1 0 0 1 0
		// 4 0 1 1 0 0
		// 5 0 1 0 0 0
		// -> graph[a][b] = 1; graph[b][a] = 1; 
		// a와 b는 노드의 입력이다. 노드는 0을 사용하지 않는다.
		// 첫째 줄을 탐색 -> 1번과 연결되어 있는 점을 찾는다. 2번과 3번이 연결되어 있다.
		// 두번째 줄을 탐색 -> 2번과 연결되어 있는 점을 찾는다. 1번, 4번, 5번이 연결되어 있다.
		
		// 2. 방향 그래프
		// 1 → 2 → 5
		// ↓   ↓
		// 3 → 4
		// 입력 -> 노드 : (1 2), (1 3), (3 4). (4 2), (2 5)
		// 2차원 배열로 입력한다. -> 인접행렬
		//   1 2 3 4 5
		// 1 0 1 1 0 0
		// 2 0 0 0 0 1
		// 3 0 0 0 1 0
		// 4 0 1 0 0 0
		// 5 0 0 0 0 0
		// -> graph[a][b] = 1; 방향이 있기 때문에 하나만 입력해준다.
		// a는 출발점, b는 도착점이다.
		
		// 3. 가중치 방향그래프
		//     2   5
		//   1 → 2 → 5
		// 4 ↓   ↓ 2
		//   3 → 4
		//     5
		// 입력 -> 노드 : (1 2 2), (1 3 4), (2 5 5), (4 2 2), (3 4 5) -> 1번에서 2로 이동하는데 가중치는 2, 1번에서 3번으로 이동하는데 가중치는 4
		// 2차원 배열로 입력한다. -> 인접행렬
		//   1 2 3 4 5
		// 1 0 2 4 0 0
		// 2 0 0 0 0 5
		// 3 0 0 0 5 0
		// 4 0 2 0 0 0
		// 5 0 0 0 0 0
		// -> graph[a][b] = c;
	}
}
